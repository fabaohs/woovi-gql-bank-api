import "./interfaces.js";
export { GraphileConfig };
export { orderedApply } from "./functionality.js";
export { applyHooks, AsyncHooks, HookObject, PluginHook, PluginHookObject, } from "./hooks.js";
export type { CallbackDescriptor, CallbackOrDescriptor, FunctionalityObject, } from "./interfaces.js";
export type { MiddlewareNext } from "./middleware.js";
export { Middleware } from "./middleware.js";
export { isResolvedPreset, resolvePresets } from "./resolvePresets.js";
export declare function sortedPlugins(plugins: GraphileConfig.Plugin[] | undefined): GraphileConfig.Plugin[];
declare global {
    namespace GraphileConfig {
        interface Plugin {
            name: string;
            version: string;
            experimental?: boolean;
            description?: string;
            provides?: string[];
            after?: string[];
            before?: string[];
        }
        /**
         * A Graphile Config Preset that can be combined with other presets to
         * ultimately build a resolved preset: a combination of plugins and
         * configuration options to be used by the various Graphile tools.
         */
        interface Preset {
            extends?: ReadonlyArray<Preset>;
            plugins?: Plugin[];
            disablePlugins?: ReadonlyArray<string>;
            appendPlugins?: never;
            prependPlugins?: never;
            skipPlugins?: never;
        }
        interface ResolvedPreset extends Preset {
            extends?: ReadonlyArray<never>;
            plugins?: Plugin[];
            disablePlugins?: ReadonlyArray<string>;
        }
    }
}
//# sourceMappingURL=index.d.ts.map